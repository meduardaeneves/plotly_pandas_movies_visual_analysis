# -*- coding: utf-8 -*-
"""plotly_pandas_movies_visual_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12QTalEdwHfajrw17FiNzaJlCpPPo2y90

Laboratório 11:

- Visualização descritiva de dados
- Consultas no DataFrame
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# #arquivo de usuários
usuarios = pd.read_csv('https://raw.githubusercontent.com/meduardaeneves/meduardaeneves.github.io/master/files/personal_projects_data_pt/plotly_pandas_movies_visual_analysis/u.user',
                     sep= '|',header =None, names=["user_id", "age", "gender", "occupation", "zip_code"])
print(usuarios.shape)
usuarios.head()

#arquivo de filmes
filmes = pd.read_csv('https://raw.githubusercontent.com/meduardaeneves/meduardaeneves.github.io/master/files/personal_projects_data_pt/plotly_pandas_movies_visual_analysis/u.item',
                     sep= '|',header =None, names=["movie_id", "movie_title", "release_date","video_release_date", "IMDb_URL",
                                                    "unknown", "Action", "Adventure", "Animation", "Children", "Comedy", "Crime",
                                                    "Documentary", "Drama", "Fantasy","FilmNoir","Horror", "Musical", "Mystery", "Romance",
                                                    "SciFi","Thriller", "War", "Western"],encoding='latin1')
print(filmes.shape)
filmes.head()

#ajuste do 'release_date', deixando somente o ano:

#De início será feito um ajuste na coluna de data de lançamento, para deixar somente o ano, para trabalharmos com uma planilha limpa:
filmes_copy = filmes.copy()
filmes_copy[['dia','mes','Ano']] = filmes_copy['release_date'].str.split('-',expand = True)
filmes_copy = filmes_copy.drop(columns=['release_date','dia','mes'])
filmes_copy = filmes_copy.reindex(["movie_id", "movie_title", "Ano","video_release_date", "IMDb_URL",
                                                    "unknown", "Action", "Adventure", "Animation", "Children", "Comedy", "Crime",
                                                    "Documentary", "Drama", "Fantasy","FilmNoir","Horror", "Musical", "Mystery", "Romance",
                                                    "SciFi","Thriller", "War", "Western"], axis = 1)
filmes_copy.head()

#arquivo de avaliação
avaliacoes = pd.read_csv('https://raw.githubusercontent.com/meduardaeneves/meduardaeneves.github.io/master/files/personal_projects_data_pt/plotly_pandas_movies_visual_analysis/u.data',
                     sep='\t',header=None, names=["user_id", "movie_id", "rating", "timestamp"])
print(avaliacoes.shape)
avaliacoes.head()

#jução das três planilhas
planilha_completa_user_av = pd.merge(usuarios,avaliacoes,on='user_id')
planilha_completa_final = pd.merge(planilha_completa_user_av,filmes_copy,on='movie_id')
planilha_completa_final.head()

"""### Questão 1

##Apresente de forma visual as informações descritivas da base de dados do Minessota (Usuários, Avaliações e Filmes) usando a biblioteca

https://plotly.com/python/

a) Descreva visualmente a quantidade de cada valor possível das variavéis (quando for uma variável categórica) - ok

b) Detalhe os valores máximos, mínimos, média e moda de cada variável numérica (apresente em forma de gráfico) -

c) Crie um gráfico temporal, ou seja, um gráfico que leva em consideração o tempo (dia, mês ou ano). - ok

d) Crie outros gráficos que façam sentido para essa base.
"""

print(usuarios.dtypes)
#gráficos categóricos: gender e occupation, não vai usar zip_code pois tem muitos dados (LETRA A)
#detalhar valores de máximo, mínimo, média e moda da idade (LETRA B)

print(filmes_copy.dtypes)
#dados categóricos: Quantidade de filmes de cada gênero lançados (LETRA A)
#gráfico da quantidade de filmes lançados por ano (LETRA C)
#distribuição quantitativa dos gêneros de filmes ao longo dos anos (LETRA C)

print(avaliacoes.dtypes)
#dados categóricos: Quantidade de rating que mais apareceu (LETRA A)
#detalhar valores de máximo, mínimo, média e moda de rating (LETRA B)
#Avaliações por gênero: para saber o gênero que mais agradou ao público (letra D)
#Rating por sexo: Diferença das notas totais dadas por mulheres x homens (Letra D)

"""#a) Descreva visualmente a quantidade de cada valor possível das variavéis (quando for uma variável categórica)

Letra A - Usuários
"""

usuarios.value_counts('zip_code')

#para usuários, os gráficos de pizza criados serão de 'gender' e 'occupation'

usuarios_gender = usuarios.copy()
usuarios_gender = usuarios_gender.drop(columns = ['user_id','age','occupation','zip_code'])
usuarios_gender['Freq_gender'] = 1
usuarios_gender = usuarios_gender.groupby('gender').sum().reset_index()
usuarios_gender.head()
#fig = px.pie(usuarios,values = usuarios.value_counts('gender'), names = 'gender')

usuarios_occupation = usuarios.copy()
usuarios_occupation = usuarios_occupation.drop(columns = ['user_id','age','gender','zip_code'])
usuarios_occupation['Freq_occupation'] = 1
usuarios_occupation = usuarios_occupation.groupby('occupation').sum().reset_index()
usuarios_occupation.head()

#CRIANDO GRÁFICOS
fig = make_subplots(rows = 1, cols = 2,
                    subplot_titles=("Usuários mulheres X usuários homens", "Profissões dos usuários"),specs=[[{"type": "pie"}, {"type": "pie"}]])
fig.add_trace(go.Pie(labels = usuarios_gender['gender'],values = usuarios_gender['Freq_gender'],legendgroup = 1),1,1)
fig.add_trace(go.Pie(labels = usuarios_occupation['occupation'],values = usuarios_occupation['Freq_occupation'],legendgroup = 2),1,2)
fig.update_layout(
    height=600,
    width=1400,
    title_text="Gráficos Categóricos - Usuários",
    title_x=.5,
    # xaxis3_title = 'Year',
    # yaxis1_title = 'Age',
    # yaxis2_title = 'Age',
    # yaxis3_title = 'Age',
    legend_tracegroupgap = 50,
    # yaxis1_range=[50, 90],
    # yaxis2_range=[50, 90],
    # yaxis3_range=[50, 90]
)
fig = go.Figure(fig)
fig.show()

"""Letra A - Avaliações"""

#avaliações quantitativas que mais apareceram:
avaliacoes_qnt = avaliacoes.copy()
avaliacoes_qnt = avaliacoes_qnt.drop(columns = ['user_id','movie_id','timestamp'])
avaliacoes_qnt['Freq_rating'] = 1
avaliacoes_qnt = avaliacoes_qnt.groupby('rating').sum().reset_index()
avaliacoes_qnt.head()

fig = px.bar(avaliacoes_qnt, x='rating', y='Freq_rating')
fig.update_layout(
    height=600,
    width=1000,
    title_text="Avaliações mais frequêntes:",
    title_x=.5,
    xaxis_title = 'avaliações',
    yaxis_title = 'Quantidade de vezes que a avaliação apareceu',
    # yaxis2_title = 'Age',
    # yaxis3_title = 'Age',
    #legend_tracegroupgap = 50,
    # yaxis1_range=[50, 90],
    # yaxis2_range=[50, 90],
    # yaxis3_range=[50, 90]
)
fig.show()

"""Letra A - Filmes"""

#Para os filmes, o gráfico apresentado será de quantidade de filmes lançados por gênero
print(len(filmes_copy.index))

filmes_copy.value_counts('movie_title')

tipos_filmes = filmes_copy.copy()
tipos_filmes =tipos_filmes.drop(columns = ["movie_id", "movie_title","video_release_date", "IMDb_URL"])
tipos_filmes.head(1700)

tipos_filmes_total = tipos_filmes.drop(columns = ["Ano"])
# tipos_filmes_total = tipos_filmes_total.goupby(["unknown", "Action", "Adventure", "Animation", "Children", "Comedy", "Crime",
#                                                     "Documentary", "Drama", "Fantasy","FilmNoir","Horror", "Musical", "Mystery", "Romance",
#                                                     "SciFi","Thriller", "War", "Western"]).sum().reset_index()
tipos_filmes_total = tipos_filmes_total.T #deixa os gêneros nas linhas
tipos_filmes_total['genero_total'] = tipos_filmes_total.sum(axis = 1) #faz a soma para cada tipo de gênero
tipo_filmes_total_final = tipos_filmes_total[['genero_total']]
tipo_filmes_total_final = tipo_filmes_total_final.rename_axis('genero').reset_index()
tipo_filmes_total_final.head(25)

fig = px.bar(tipo_filmes_total_final, x='genero', y='genero_total')
fig.update_layout(
    height=600,
    width=1000,
    title_text="Gêneros dos filmes lançados:\nConsidera-se que um filme faz parte de um ou mais gêneros",
    title_x=.5,
    xaxis_title = 'Gênero do filme',
    yaxis_title = 'Quantidade de lançamento dos gêneros',
    # yaxis2_title = 'Age',
    # yaxis3_title = 'Age',
    #legend_tracegroupgap = 50,
    # yaxis1_range=[50, 90],
    # yaxis2_range=[50, 90],
    # yaxis3_range=[50, 90]
)
fig.show()

"""#b)Detalhe os valores máximos, mínimos, média e moda de cada variável numérica (apresente em forma de gráfico)"""

print(usuarios.describe(),'\n')
#Para os usuários serão apresentados os dados estatísticos das idades:

usuarios_dadosEst_Idade = usuarios['age'].copy().reset_index()

fig = go.Figure()
fig.add_trace(go.Box(
    y= usuarios_dadosEst_Idade['age'],
    name='Mean & SD',
    marker_color='royalblue',
    boxmean='sd' # represent mean and standard deviation
))
fig.update_layout(
    height=400,
    width=700,
    title='Dados estatísticos - idade usuário',
    title_x=.5,
    yaxis_title='Idade',
    font = {'family': 'Arial','size': 12,'color': 'black'})
fig.show()

print(avaliacoes.describe(),'\n')
#Para as avaliações serão apresentados os dados estatísticos de rating:

usuarios_dadosEst_rating = avaliacoes['rating'].copy().reset_index()

fig = go.Figure()
fig.add_trace(go.Box(
    y= usuarios_dadosEst_rating['rating'],
    name='Mean & SD',
    marker_color='darkblue',
    boxmean='sd' # represent mean and standard deviation
))
fig.update_layout(
    height=400,
    width=700,
    title='Dados estatísticos - rating obtidos',
    title_x=.5,
    yaxis_title='rating',
    font = {'family': 'Arial','size': 12,'color': 'black'})
fig.show()

print(filmes_copy.describe(),'\n')
filmes_copy.head()

"""#c) Crie um gráfico temporal, ou seja, um gráfico que leva em consideração o tempo (dia, mês ou ano)."""

#SERÃO CRIADOS DOIS GRÁFICOS TEMPORAIS:
#gráfico da quantidade de filmes lançados por ano
#distribuição quantitativa dos gêneros de filmes ao longo dos anos

#gráfico da quantidade de filmes lançados por ano
filmes_copy.value_counts('Ano')

filmes_copy_ano = filmes_copy.copy()
filmes_copy_ano = filmes_copy_ano.drop(columns = ["movie_id", "movie_title","video_release_date", "IMDb_URL",
                                                    "unknown", "Action", "Adventure", "Animation", "Children", "Comedy", "Crime",
                                                    "Documentary", "Drama", "Fantasy","FilmNoir","Horror", "Musical", "Mystery", "Romance",
                                                    "SciFi","Thriller", "War", "Western"])
filmes_copy_ano['Freq_Filmes'] = 1
filmes_copy_ano = filmes_copy_ano.groupby('Ano').sum().reset_index()
filmes_copy_ano.head(1700)

fig = px.bar(filmes_copy_ano, x='Ano', y='Freq_Filmes')
fig.update_layout(
    height=600,
    width=1200,
    title_text="Lançamento de filmes por ano",
    title_x=.5,
    xaxis_title = 'Ano',
    yaxis_title = 'Filmes lançados',
    # yaxis2_title = 'Age',
    # yaxis3_title = 'Age',
    #legend_tracegroupgap = 50,
    # yaxis1_range=[50, 90],
    # yaxis2_range=[50, 90],
    # yaxis3_range=[50, 90]
)
fig.show()

#distribuição quantitativa dos gêneros de filmes ao longo dos anos
tipos_filmes_ano =tipos_filmes.groupby('Ano').sum().reset_index()
tipos_filmes_ano

fig = go.Figure()

fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['unknown'], name = 'unknown'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Action'], name = 'Action'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Adventure'], name = 'Adventure'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Animation'], name = 'Animation'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Children'], name = 'Children'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Comedy'], name = 'Comedy'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Crime'], name = 'Crime'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Documentary'], name = 'Documentary'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Drama'], name = 'Drama'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Fantasy'], name = 'Fantasy'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['FilmNoir'], name = 'FilmNoir'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Horror'], name = 'Horror'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Musical'], name = 'Musical'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Mystery'], name = 'Mystery'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Romance'], name = 'Romance'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['SciFi'], name = 'SciFi'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Thriller'], name = 'Thriller'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['War'], name = 'War'))
fig.add_trace(go.Scatter(x = tipos_filmes_ano['Ano'], y = tipos_filmes_ano['Western'], name = 'Western'))

fig.update_layout(
    height=600,
    width=1500,
    title='Distribuição quantitativa dos gêneros de filmes ao longo dos anos',
    title_x=.5,
    xaxis_title='Ano',
    yaxis_title='quantitativa dos gêneros',
    plot_bgcolor = 'white',
    font = {'family': 'Arial','size': 12,'color': 'black'})
fig.update_xaxes( showgrid=True, gridwidth=1, gridcolor='lightgray',showline=True, linewidth=1, linecolor='black')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray',showline=True, linewidth=1, linecolor='black')
fig.show()

"""#d) Crie outros gráficos que façam sentido para essa base."""

#OBS: TODAS AS COLUNAS:
# ["user_id","age","gender","occupation","zip_code","movie_id","rating","timestamp",'Ano',"movie_id", "movie_title","video_release_date", "IMDb_URL",
#                                                     "unknown", "Action", "Adventure", "Animation", "Children", "Comedy", "Crime",
#                                                     "Documentary", "Drama", "Fantasy","FilmNoir","Horror", "Musical", "Mystery", "Romance",
#                                                     "SciFi","Thriller", "War", "Western"]

#Avaliações por gênero: para saber o gênero que mais agradou ao público

planilha_genero_avaliações = planilha_completa_final.copy()
planilha_genero_avaliações = planilha_genero_avaliações.drop(columns = ["user_id","age","gender","occupation","zip_code","movie_id",
                                                                        "timestamp",'Ano',"movie_id", "movie_title","video_release_date", "IMDb_URL"]).groupby('rating').sum().reset_index()
planilha_genero_avaliações.head(25)

fig = go.Figure()

fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['unknown'], name = 'unknown'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Action'], name = 'Action'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Adventure'], name = 'Adventure'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Animation'], name = 'Animation'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Children'], name = 'Children'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Comedy'], name = 'Comedy'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Crime'], name = 'Crime'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Documentary'], name = 'Documentary'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Drama'], name = 'Drama'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Fantasy'], name = 'Fantasy'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['FilmNoir'], name = 'FilmNoir'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Horror'], name = 'Horror'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Musical'], name = 'Musical'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Mystery'], name = 'Mystery'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Romance'], name = 'Romance'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['SciFi'], name = 'SciFi'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Thriller'], name = 'Thriller'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['War'], name = 'War'))
fig.add_trace(go.Bar(x = planilha_genero_avaliações['rating'], y = planilha_genero_avaliações['Western'], name = 'Western'))

#fig = px.bar(planilha_genero_avaliações, x="rating", y="qnt_gender_rating_perc",color = 'gender',barmode = 'group')
fig.update_layout(
    height=600,
    width=1200,
    title='Maiores notas, fornecidas por cada gênero, comparado ao outro',
    title_x=.5,
    xaxis_title='Rating',
    yaxis_title='Qnt de de vezes que determinado ranking foi escolhido para o gênero')
fig.show()

"""apesar dos filmes de coméria serem produzidos em maior quantidade, em relação à classificação 5 estrelas, o filme de ação, que é prodizido menos qu ele, praticamente se iguala neste quesito."""

#Avaliações por sexo
planilha_sexo_avaliações_qnt = planilha_completa_final.copy()
planilha_sexo_avaliações_qnt = planilha_sexo_avaliações_qnt.drop(columns = ["user_id","age","occupation","zip_code","movie_id","timestamp",'Ano',"movie_id",
                                                                            "movie_title","video_release_date", "IMDb_URL",
                                                                            "unknown", "Action", "Adventure", "Animation", "Children", "Comedy", "Crime",
                                                                            "Documentary", "Drama", "Fantasy","FilmNoir","Horror", "Musical", "Mystery", "Romance",
                                                                            "SciFi","Thriller", "War", "Western"])
planilha_sexo_avaliações_qnt['qnt_gender_rating'] = 1
planilha_sexo_avaliações_qnt = planilha_sexo_avaliações_qnt.groupby(['rating','gender']).sum().reset_index()
qnt_avaliacoes_homens = 0
qnt_avaliacoes_mulheres = 0
for i in range(len(planilha_sexo_avaliações_qnt.index)):
  if planilha_sexo_avaliações_qnt.iloc[i,1] == "F":
    qnt_avaliacoes_mulheres += planilha_sexo_avaliações_qnt.iloc[i,2]
  else:
    qnt_avaliacoes_homens += planilha_sexo_avaliações_qnt.iloc[i,2]
print(f'Qnt avaliações femininas: {qnt_avaliacoes_mulheres}')
print(f'Qnt avaliações masculinas: {qnt_avaliacoes_homens}\n')
print(f'Total de avaliações: ({qnt_avaliacoes_mulheres+qnt_avaliacoes_homens})')

#vamos adicionar uma coluna de %rating por gênero
#O objetivo é saber a preferência de cada gênero, comparado ao outro, já que há mais homens que mulheres.
planilha_sexo_avaliações_perc = planilha_sexo_avaliações_qnt.copy()
planilha_sexo_avaliações_perc['qnt_gender_rating_perc'] = 0
for i in range(len(planilha_sexo_avaliações_perc .index)):
  if planilha_sexo_avaliações_perc.iloc[i,1] == "F":
    planilha_sexo_avaliações_perc.iloc[i,3] = round(planilha_sexo_avaliações_perc.iloc[i,2]/qnt_avaliacoes_mulheres*100,2)
  else:
    planilha_sexo_avaliações_perc.iloc[i,3] = round(planilha_sexo_avaliações_perc.iloc[i,2]/qnt_avaliacoes_homens*100,2)
planilha_sexo_avaliações_perc.head(100)

fig = px.bar(planilha_sexo_avaliações_perc, x="rating", y="qnt_gender_rating_perc",color = 'gender',barmode = 'group')
fig.update_layout(
    height=400,
    width=800,
    title='Maiores notas, fornecidas por sexo, comparado ao outro',
    title_x=.5,
    xaxis_title='Rating',
    yaxis_title='porcentagem do total de mulheres ou homens')
fig.show()

#no gráfico acima, percebeu-se que as mulheres deram mais avaliações do tipo 1 e 5 do que os homens.

"""#Questão 2
Responda as questões abaixo:

a) Gere um dataframe em que possua apenas os usuários que possuem gênero masculino e trabalham como student e que tenham idade acima de 20 anos.

b) Quantos alunos que são programadores e que são do sexo feminino?

c) Quantas avaliações foram acima de 3? (4 ou 5)
"""

##letra A:
usuariosLetraA = usuarios[(usuarios.age > 20)&(usuarios.occupation == "student")&(usuarios.gender == "M")]
usuariosLetraA.head()

##letra B:
usuariosLetraB = usuarios[(usuarios.occupation == "programmer")&(usuarios.gender == "F")]
usuariosLetraB.head(10)
print(f'Usuárias que são programadoras e que são do sexo feminino: {len(usuariosLetraB.index)}')

#letra C:
avaliacoesLetraC = avaliacoes[avaliacoes.rating > 3]
avaliacoesLetraC.value_counts('rating')

print(f'Avaliações que foram feitas acima de 3 (4 ou 5): {len(avaliacoesLetraC.index)}')